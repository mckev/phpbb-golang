package helper

import (
	"testing"

	"phpbb-golang/internal/helper"
)

func TestIsEmailValid(t *testing.T) {
	if !helper.IsEmailValid("user@example.com") {
		t.Errorf("Expected true")
	}
	if helper.IsEmailValid("") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("user") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("@example.com") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("user@") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("user@.com") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("u ser@.com") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("user@example,com") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("user@example@example.com") {
		t.Errorf("Expected false")
	}
	if helper.IsEmailValid("user@example.com.") {
		t.Errorf("Expected false")
	}
}

func TestIsPasswordValid(t *testing.T) {
	if !helper.IsPasswordValid("Password1") {
		t.Errorf("Expected true")
	}
	if helper.IsPasswordValid("password1") {
		// No uppercase
		t.Errorf("Expected false")
	}
	if helper.IsPasswordValid("PASSWORD1") {
		// No lowercase
		t.Errorf("Expected false")
	}
	if helper.IsPasswordValid("Password") {
		// No digit
		t.Errorf("Expected false")
	}
	if helper.IsPasswordValid("Pass1") {
		// Too short
		t.Errorf("Expected false")
	}
}

func TestIsStringNFKCNormal(t *testing.T) {
	// Ambiguous characters are rejected
	if !helper.IsStringNFKCNormalized("ABC") {
		t.Errorf("Expected true")
	}
	if helper.IsStringNFKCNormalized("Ôº°Ôº¢Ôº£") {
		t.Errorf("Expected false")
	}
	if !helper.IsStringNFKCNormalized("Admin") {
		t.Errorf("Expected true")
	}
	if helper.IsStringNFKCNormalized("Ôº°ÔΩÑÔΩçÔΩâÔΩé") {
		t.Errorf("Expected false")
	}
	if !helper.IsStringNFKCNormalized("Hello") {
		t.Errorf("Expected true")
	}
	if helper.IsStringNFKCNormalized("‚Ñåùî¢ùî©ùî©ùî¨") {
		t.Errorf("Expected false")
	}
	if helper.IsStringNFKCNormalized("ùî•ùî¢ùî©ùî©ùî¨") {
		t.Errorf("Expected false")
	}
	if !helper.IsStringNFKCNormalized("LOL") {
		t.Errorf("Expected true")
	}
	if helper.IsStringNFKCNormalized("‚ìÅ‚ìû‚ìõ") {
		t.Errorf("Expected false")
	}

	// All below are okay
	if !helper.IsStringNFKCNormalized("Caf√©") {
		t.Errorf("Expected true")
	}
	if !helper.IsStringNFKCNormalized("Stra√üe") {
		t.Errorf("Expected true")
	}
	// Chinese "hello"
	if !helper.IsStringNFKCNormalized("‰Ω†Â•Ω") {
		t.Errorf("Expected true")
	}
	// Japanese kanji "Tokyo"
	if !helper.IsStringNFKCNormalized("Êù±‰∫¨") {
		t.Errorf("Expected true")
	}
	// Russian "good day"
	if !helper.IsStringNFKCNormalized("–î–æ–±—Ä—ã–π –¥–µ–Ω—å") {
		t.Errorf("Expected true")
	}
	// Arabic "hello"
	if !helper.IsStringNFKCNormalized("ŸÖÿ±ÿ≠ÿ®ÿß") {
		t.Errorf("Expected true")
	}
	// Hindi "computer"
	if !helper.IsStringNFKCNormalized("‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞") {
		t.Errorf("Expected true")
	}
}
